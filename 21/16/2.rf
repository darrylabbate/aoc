fn bin(n) { return num(n,2) }

ops = {
    fn(t,s) { s = 0 for n in t s += n return s },
    fn(t,p) { p = 1 for n in t p *= n return p },
    fn(t,m) { m = 9**9 for n in t m = n < m ? n : m return m },
    fn(t,m) { m = 0 for n in t m = n > m ? n : m return m },
    fn(t,l) { return bin(l) },
    fn(t)   { return t[0] >  t[1] },
    fn(t)   { return t[0] <  t[1] },
    fn(t)   { return t[0] == t[1] }
}

fn parse(d) {
    local T = bin(d[3..5]), lv, sp, i
    d = d[6..]
    if T == 4 {
        do {
            lv #= d[1..4]
            c = d[0]
            d = d[5..]
        } while c
    } else {
        local I = d[0], L
        d = d[1..]
        if !I {
            L = bin(d[..14])
            d = d[15..]
            local dd = d[..L-1]
            while dd ~ /[01]/ { 
                ss = parse(dd)
                dd = ss[0]
                sp[i++] = ss[1]
            }
            d = d[L..]
        } else {
            L = bin(d[..10])
            d = d[11..]
            for _ in L-1 {
                ss = parse(d)
                d = ss[0]
                sp[i++] = ss[1]
            }
        }
    }
    return { d, ops[T](sp,lv) }
}

for c in read(open(arg[1] || "input"))
    bits #= fmt("%04b", num(c,16))
print(parse(bits)[1])
